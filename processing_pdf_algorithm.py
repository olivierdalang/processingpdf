# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingPDF
                                 A QGIS plugin
 Allow to export PDFs from Processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-10
        copyright            : (C) 2018 by Olivier Dalang / SPC
        email                : olivier.dalang@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Olivier Dalang / SPC'
__date__ = '2018-09-10'
__copyright__ = '(C) 2018 by Olivier Dalang / SPC'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication, QFile, QTemporaryDir
from PyQt5.QtXml import QDomDocument
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterMultipleLayers,
                       QgsReadWriteContext )
from qgis.core import *

import os.path
import tempfile
import shutil

from .processing_pdf_algorithm_dialog import PdfAlgorithmDialog


class ProcessingPDFAlgorithm(QgsProcessingAlgorithm):

    BASE_PROJECT = 'BASE_PROJECT'
    LAYOUT_NAME = 'LAYOUT_NAME'
    LAYERS_TEMPLATES = 'LAYERS_TEMPLATES'
    LAYERS_OVERRIDES = 'LAYERS_OVERRIDES'
    OUTPUT_FOLDER = 'OUTPUT_FOLDER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFile (
                self.BASE_PROJECT,
                self.tr('Base project (leave empty for current project)'),
                behavior=QgsProcessingParameterFile.File,
                extension='qgs',
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterString (
                self.LAYOUT_NAME,
                self.tr('Layout name'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterString (
                self.LAYERS_TEMPLATES,
                self.tr('Template layers (layers to be replaced - comma separated layer ids - order is important)'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterMultipleLayers (
                self.LAYERS_OVERRIDES,
                self.tr('Override layers (layers that will replace templates - order is important)'),
                layerType=QgsProcessing.TypeMapLayer,
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.OUTPUT_FOLDER,
                self.tr('Output folder'),
                behavior=QgsProcessingParameterFile.Folder,
                extension='pdf',
                optional=False,
            )
        )

    def createCustomParametersWidget(self, parent):
        return PdfAlgorithmDialog(self)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # get the parameter values
        base_project = self.parameterAsFile(parameters, self.BASE_PROJECT, context)
        layout_name = self.parameterAsString(parameters, self.LAYOUT_NAME, context)
        layers_templates = self.parameterAsString(parameters, self.LAYERS_TEMPLATES, context)
        layers_overrides = self.parameterAsLayerList(parameters, self.LAYERS_OVERRIDES, context)
        output_folder = self.parameterAsFile(parameters, self.OUTPUT_FOLDER, context)

        # if no project file is specified, we create a temp file from the current project
        if not base_project:
            temp_dir = QTemporaryDir()
            temp_dir.setAutoRemove(False)
            base_project = os.path.join(temp_dir.path(),'temp_qgis_project')
            QgsProject.instance().write(base_project)

        # instantiation of the project
        project_instance = QgsProject()
        project_instance.read(base_project)
        
        # replace template layers datasources by override layers datasources
        for i,template_layer_id in enumerate(layers_templates.split(',')):
            template_layer = project_instance.mapLayer(template_layer_id)
            template_uri = template_layer.dataProvider().dataSourceUri()
            override_layer = layers_overrides[i]
            override_uri = override_layer.dataProvider().dataSourceUri()
            template_layer.dataProvider().setDataSourceUri(override_uri)
            #debug
            QgsMessageLog.logMessage('replacing {} by {}'.format(template_uri,override_uri),'PDF alg')

        # actual export of the PDF
        layout = project_instance.layoutManager().layoutByName(layout_name) # TODO : pick first layout if empty
        export = QgsLayoutExporter(layout)

        i=0
        output_file = None
        while not output_file or os.path.exists(output_file):
            i+=1
            output_file = os.path.join(output_folder, str(i).zfill(3)+'.pdf')

        export.exportToPdf(output_file, QgsLayoutExporter.PdfExportSettings())

        # debug
        project_instance.write(output_file+"debug.qgs")

        # done !!
        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Export to PDF'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'PDF Exports'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ProcessingPDFAlgorithm()
